@model Interpret_grading_documents.Services.CourseEquivalents

@using System.Text.Json;

@{
    ViewData["Title"] = "Manage Course Requirements";
}

<div class="container mt-5">
    <h1 class="display-4 text-center">Manage Course Requirements</h1>

    <!-- Add Subject Modal -->
    <div class="modal fade" id="addSubjectModal" tabindex="-1" role="dialog" aria-labelledby="addSubjectModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form id="addSubjectForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addSubjectModalLabel">Add Subject</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeAddSubjectModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="addSubjectName">Subject Name</label>
                            <input type="text" class="form-control" id="addSubjectName" required />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeAddSubjectModal()">Close</button>
                        <button type="button" class="btn btn-primary" onclick="saveAddedSubject()">Save Subject</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="addCourseModal" tabindex="-1" role="dialog" aria-labelledby="addCourseModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form id="addCourseForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addCourseModalLabel">Add/Edit Course</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeAddCourseModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <div class="form-group">
                            <label for="addCourseSubjectName">Subject Name</label>
                            <input type="text" class="form-control" id="addCourseSubjectName" readonly />
                        </div>
                        <div class="form-group position-relative">
                            <label for="addCourseName">Course Name</label>
                            <input type="text" class="form-control" id="addCourseName" required />
                            <div class="autocomplete-dropdown" id="courseNameDropdown" style="display: none;"></div>
                        </div>
                        <div class="form-group">
                            <label for="addCourseCode">Course Code</label>
                            <input type="text" class="form-control" id="addCourseCode" required />
                        </div>
                        <div class="form-group">
                            <label for="addLevel">Level</label>
                            <input type="number" class="form-control" id="addLevel" required />
                        </div>
                        <div class="form-group">
                            <label for="addRequiredGrade">Required Grade</label>
                            <select class="form-control" id="addRequiredGrade">
                                <option value="A">A</option>
                                <option value="B">B</option>
                                <option value="C">C</option>
                                <option value="D">D</option>
                                <option value="E">E</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Alternatives</label>
                            <div id="addAlternativesContainer"></div>
                            <button type="button" class="btn btn-secondary" onclick="addAlternative('add')">Add Alternative</button>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <input type="hidden" id="addCourseSubjectIndex" />
                        <input type="hidden" id="addCourseIndex" />
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeAddCourseModal()">Close</button>
                        <button type="button" class="btn btn-primary" onclick="saveAddedCourse()">Save Course</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="mt-4 text-center">
        <button class="btn btn-primary" onclick="openAddSubjectModal()">Add Subject</button>
    </div>

    <!-- Collapsible Section - Help & Definitions -->
    <div class="accordion mt-4" id="helpDefinitionsAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Help & Definitions
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#helpDefinitionsAccordion">
                <div class="accordion-body">
                    <p><strong>Here you can add subjects, courses and required grades that the student should have.</strong></p>
                    <p><strong>Course Name:</strong> The official name of the course as listed in the academic records.</p>
                    <p><strong>Course Code:</strong> A unique identifier for the course.</p>
                    <p>
                        <strong>Level:</strong>
                        <br>For example:
                        <ul>
                            <li><strong>Matematik 1</strong> would have level 1.</li>
                            <li><strong>Matematik 2</strong> would have level 2.</li>
                        </ul>
                        This is to ensure lower level courses would pass if the user has a higher level course.
                    </p>
                    <p><strong>Required Grade:</strong> The minimum grade required for the course.</p>
                    <p><strong>Alternatives:</strong> Other courses that can fulfill the same requirement if the primary course is not available or completed.</p>
                    <p><strong>Actions:</strong></p>
                    <ul>
                        <li><strong>Edit:</strong> Modify the details of an existing course.</li>
                        <li><strong>Delete:</strong> Delete the course from the requirements list.</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h3>Course List</h3>
        @for (int subjectIndex = 0; subjectIndex < Model.Subjects.Count; subjectIndex++)
        {
            var subject = Model.Subjects[subjectIndex];
            <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>@subject.Name</h4>
                    <button class="btn btn-danger btn-sm" onclick="deleteSubject(@subjectIndex)">Delete Subject</button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped mt-3">
                            <thead>
                                <tr>
                                    <th>Course Name</th>
                                    <th>Course Code</th>
                                    <th>Level</th>
                                    <th>Required Grade</th>
                                    <th>Alternatives</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int courseIndex = 0; courseIndex < subject.Courses.Count; courseIndex++)
                                {
                                    var course = subject.Courses[courseIndex];
                                    <tr>
                                        <td>@course.Name</td>
                                        <td>@course.Code</td>
                                        <td>@course.Level</td>
                                        <td>@course.RequiredGrade</td>
                                        <td>
                                            @if (course.Alternatives != null && course.Alternatives.Any())
                                            {
                                                foreach (var alt in course.Alternatives)
                                                {
                                                    <div>@alt.Name (@alt.Code)</div>
                                                }
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-warning btn-sm mb-1" onclick="openEditCourseModal(@subjectIndex, @courseIndex)">Edit</button>
                                            <button class="btn btn-danger btn-sm mb-1" onclick="deleteCourse(@subjectIndex, @courseIndex)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <button class="btn btn-primary btn-sm" onclick="openAddCourseModal(@subjectIndex)">Add Course</button>
                </div>
            </div>
        }
    </div>

    <div class="mt-4 text-center">
        <button class="btn btn-success" onclick="submitChanges()">Save Changes</button>
    </div>
</div>

@section Scripts {
    
    <script>
        var courseEquivalents = @Html.Raw(JsonSerializer.Serialize(Model));
        var availableCourses = @Html.Raw(JsonSerializer.Serialize(ViewBag.AvailableCourses));

        function openAddSubjectModal() {
            document.getElementById("addSubjectForm").reset();
            $('#addSubjectModal').modal('show');
        }

        function closeAddSubjectModal() {
            $('#addSubjectModal').modal('hide');
            document.getElementById("addSubjectForm").reset();
        }

        function saveAddedSubject() {
            var subjectName = document.getElementById("addSubjectName").value;
            if (subjectName.trim() === '') {
                alert("Please enter a subject name.");
                return;
            }

            var newSubject = {
                name: subjectName,
                courses: []
            };

            courseEquivalents.subjects.push(newSubject);
            closeAddSubjectModal();
            submitChanges();
        }

        function deleteSubject(subjectIndex) {
            if (confirm("Are you sure you want to delete this subject?")) {
                courseEquivalents.subjects.splice(subjectIndex, 1);
                submitChanges();
            }
        }

        function initAutocomplete(inputElement, dropdownElement, getMatchingItems, onItemSelected) {
            inputElement.addEventListener("input", function () {
                var searchTerm = this.value.toLowerCase();
                dropdownElement.innerHTML = '';
                if (searchTerm.length > 0) {
                    var matchingItems = getMatchingItems(searchTerm);
                    if (matchingItems.length > 0) {
                        matchingItems.forEach(function (itemData) {
                            var item = document.createElement('div');
                            item.className = 'dropdown-item';
                            item.innerText = itemData.displayText;
                            item.onclick = function () {
                                onItemSelected(itemData);
                                dropdownElement.style.display = 'none';
                            };
                            dropdownElement.appendChild(item);
                        });
                        dropdownElement.style.display = 'block';
                    } else {
                        dropdownElement.style.display = 'none';
                    }
                } else {
                    dropdownElement.style.display = 'none';
                }
            });

            document.addEventListener('click', function (event) {
                if (!inputElement.parentElement.contains(event.target)) {
                    dropdownElement.style.display = 'none';
                }
            });
        }

        function getMatchingCourses(searchTerm) {
            return availableCourses.filter(function (course) {
                return course.CourseName.toLowerCase().includes(searchTerm) || course.CourseCode.toLowerCase().includes(searchTerm);
            }).map(function (course) {
                return { displayText: course.CourseName, courseData: course };
            });
        }

        function openAddCourseModal(subjectIndex) {
            var subject = courseEquivalents.subjects[subjectIndex];
            document.getElementById("addCourseForm").reset();
            document.getElementById("addCourseSubjectName").value = subject.name;
            document.getElementById("addCourseSubjectIndex").value = subjectIndex;
            document.getElementById("addCourseIndex").value = '';
            document.getElementById("addAlternativesContainer").innerHTML = '';

            var courseNameInput = document.getElementById("addCourseName");
            var courseNameDropdown = document.getElementById("courseNameDropdown");
            initAutocomplete(courseNameInput, courseNameDropdown, getMatchingCourses, function (selectedItem) {
                courseNameInput.value = selectedItem.courseData.CourseName;
                document.getElementById("addCourseCode").value = selectedItem.courseData.CourseCode;
            });

            $('#addCourseModal').modal('show');
        }

        function deleteCourse(subjectIndex, courseIndex) {
            var subject = courseEquivalents.subjects[subjectIndex];
            subject.courses.splice(courseIndex, 1);
            submitChanges();
        }

        function openEditCourseModal(subjectIndex, courseIndex) {
            var subject = courseEquivalents.subjects[subjectIndex];
            var course = subject.courses[courseIndex];
            document.getElementById("addCourseForm").reset();
            document.getElementById("addCourseSubjectName").value = subject.name;
            document.getElementById("addCourseSubjectIndex").value = subjectIndex;
            document.getElementById("addCourseIndex").value = courseIndex;
            document.getElementById("addCourseName").value = course.name;
            document.getElementById("addCourseCode").value = course.code;
            document.getElementById("addLevel").value = course.level;
            document.getElementById("addRequiredGrade").value = course.requiredGrade;
            document.getElementById("addAlternativesContainer").innerHTML = '';

            var courseNameInput = document.getElementById("addCourseName");
            var courseNameDropdown = document.getElementById("courseNameDropdown");
            initAutocomplete(courseNameInput, courseNameDropdown, getMatchingCourses, function (selectedItem) {
                courseNameInput.value = selectedItem.courseData.CourseName;
                document.getElementById("addCourseCode").value = selectedItem.courseData.CourseCode;
            });

            if (course.alternatives && course.alternatives.length > 0) {
                course.alternatives.forEach(function (alt) {
                    addAlternative('add', alt.name, alt.code);
                });
            }

            $('#addCourseModal').modal('show');
        }

        function closeAddCourseModal() {
            $('#addCourseModal').modal('hide');
            document.getElementById("addCourseForm").reset();
            document.getElementById("addAlternativesContainer").innerHTML = '';
        }

        function saveAddedCourse() {
            var subjectIndex = document.getElementById("addCourseSubjectIndex").value;
            var courseIndex = document.getElementById("addCourseIndex").value;
            var subject = courseEquivalents.subjects[subjectIndex];

            var courseName = document.getElementById("addCourseName").value.trim();
            var courseCode = document.getElementById("addCourseCode").value.trim();
            var level = document.getElementById("addLevel").value.trim();
            var requiredGrade = document.getElementById("addRequiredGrade").value.trim();


            if (courseName === '' || courseCode === '' || level === '' || requiredGrade === '') {
                alert("Please fill in all required fields.");
                return;
            }

            var course = {
                name: courseName,
                code: courseCode,
                level: parseInt(level),
                requiredGrade: requiredGrade,
                alternatives: []
            };

            var alternativesContainer = document.getElementById("addAlternativesContainer");
            var alternativeRows = alternativesContainer.children;
            for (var i = 0; i < alternativeRows.length; i++) {
                var row = alternativeRows[i];
                var altNameInput = row.querySelector(".alternative-name");
                var altCodeInput = row.querySelector(".alternative-code");
                var altName = altNameInput.value.trim();
                var altCode = altCodeInput.value.trim();
                if (altName && altCode) {
                    course.alternatives.push({ name: altName, code: altCode });
                } else if (altName || altCode) {
                    alert("Please fill in both name and code for each alternative.");
                    return;
                }
            }

            if (courseIndex === '') {
                subject.courses.push(course);
            } else {
                subject.courses[courseIndex] = course;
            }

            closeAddCourseModal();
            submitChanges();
        }

        function addAlternative(type, altName = '', altCode = '') {
            var container = document.getElementById(type + "AlternativesContainer");
            var div = document.createElement("div");
            div.className = "form-row mb-2 position-relative";
            div.innerHTML = `
                        <div class="col">
                            <input type="text" class="form-control alternative-name" placeholder="Alternative Name" value="${altName}" required />
                            <div class="autocomplete-dropdown alternative-dropdown" style="display: none;"></div>
                        </div>
                        <div class="col">
                            <input type="text" class="form-control alternative-code" placeholder="Alternative Code" value="${altCode}" required />
                        </div>
                        <div class="col-auto mt-2">
                            <button type="button" class="btn btn-danger" onclick="removeAlternative(this)">Delete</button>
                        </div>
                    `;
            container.appendChild(div);

            var alternativeNameInput = div.querySelector(".alternative-name");
            var alternativeDropdown = div.querySelector(".alternative-dropdown");
            var alternativeCodeInput = div.querySelector(".alternative-code");

            initAutocomplete(alternativeNameInput, alternativeDropdown, getMatchingCourses, function (selectedItem) {
                alternativeNameInput.value = selectedItem.courseData.CourseName;
                alternativeCodeInput.value = selectedItem.courseData.CourseCode;
            });
        }

        function removeAlternative(button) {
            var row = button.parentElement.parentElement;
            row.remove();
        }

        function submitChanges() {
            fetch('@Url.Action("SaveCourseEquivalents", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(courseEquivalents)
            }).then(response => {
                if (response.ok) {
                    alert("Changes saved successfully.");
                    location.reload();
                } else {
                    alert("Failed to save changes.");
                }
            }).catch(error => {
                console.error("Error:", error);
                alert("An error occurred while saving changes.");
            });
        }
        document.addEventListener('DOMContentLoaded', function () {
            const collapseElement = document.getElementById('collapseOne');
            const wasCollapsed = sessionStorage.getItem('helpDefinitionsCollapsedRequired') === 'true';

            if (!wasCollapsed) {
                collapseElement.classList.add('show');
            }

            document.querySelector('.accordion-button').addEventListener('click', function () {
                const isCurrentlyCollapsed = collapseElement.classList.contains('show');
                sessionStorage.setItem('helpDefinitionsCollapsedRequired', !isCurrentlyCollapsed);
            });
        });

        function toggleCollapse(collapseId) {
            const element = document.getElementById(collapseId);
            element.classList.toggle('show');
        }
    </script>
}
