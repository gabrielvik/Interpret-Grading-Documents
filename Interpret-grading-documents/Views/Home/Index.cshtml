@model List<Interpret_grading_documents.Services.GPTService.GraduationDocument>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4">Grading Documents</h1>

        <div id="loadingScreen" class="mt-3" style="display: none;">
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <p class="mt-3" id="loadingMessage">Initializing...</p>
        </div>

        <div class="mt-3" id="contentSection">
            @if (Model != null && Model.Any())
            {
                <ul>
                    @foreach (var document in Model)
                    {
                        <li>
                            <a asp-action="ViewDocument" asp-route-id="@document.Id" asp-controller="Home">@document.DocumentName</a>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="alert alert-info mt-4" role="alert">
                    No data extracted yet. Upload documents below to analyze the data.
                </div>

                <!-- Merged Upload Section -->
                <!-- Hidden File Input -->
                <input type="file" id="uploadedFiles" accept=".pdf,.jpg,.jpeg,.png" multiple style="display: none;" />

                <!-- Drag and Drop Area -->
                <div id="dropZone" class="drop-zone" tabindex="0">
                    <p class="mb-0">Drag and drop your documents here or click to select files.</p>
                </div>

                <div class="mt-3">
                    <h4>Uploaded Files</h4>
                    <ul id="fileList" class="list-group"></ul>
                </div>

                <button id="analyzeButton" class="btn btn-primary mt-3" style="display:none;">Analyze Data</button>
            }
        </div>
    </div>

    @section Scripts {
        <style>
            .drop-zone {
                border: 2px dashed #ccc;
                border-radius: 5px;
                padding: 30px;
                text-align: center;
                cursor: pointer;
                color: #aaa;
                transition: border-color 0.3s, background-color 0.3s;
            }

            .drop-zone.drag-over {
                border-color: #333;
                background-color: #f0f0f0;
                color: #333;
            }
        </style>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const fileList = document.getElementById('fileList');
                const uploadedFilesInput = document.getElementById('uploadedFiles');
                const analyzeButton = document.getElementById('analyzeButton');
                const dropZone = document.getElementById('dropZone');
                let uploadedFiles = [];

                uploadedFilesInput.addEventListener('change', function () {
                    const files = Array.from(uploadedFilesInput.files);
                    uploadedFiles.push(...files);

                    displayFiles();
                });

                function displayFiles() {
                    fileList.innerHTML = '';
                    uploadedFiles.forEach((file, index) => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.textContent = file.name;

                        const removeButton = document.createElement('button');
                        removeButton.textContent = 'Remove';
                        removeButton.className = 'btn btn-danger btn-sm';
                        removeButton.setAttribute('data-index', index);

                        removeButton.addEventListener('click', function () {
                            uploadedFiles.splice(index, 1);
                            displayFiles();
                        });

                        li.appendChild(removeButton);
                        fileList.appendChild(li);
                    });

                    analyzeButton.style.display = uploadedFiles.length > 0 ? 'block' : 'none';
                }

                analyzeButton.addEventListener('click', function () {
                    if (uploadedFiles.length > 0) {
                        // Show the loading screen
                        document.getElementById('loadingScreen').style.display = 'block';
                        document.getElementById('contentSection').style.display = 'none';

                        // Update loading messages
                        const messages = [
                            "Reading documents...",
                            "Extracting data...",
                            "Verifying courses...",
                            "Finalizing analysis..."
                        ];
                        let index = 0;

                        const loadingMessage = document.getElementById('loadingMessage');
                        const interval = setInterval(function () {
                            loadingMessage.textContent = messages[index++];
                            if (index >= messages.length) {
                                clearInterval(interval);
                            }
                        }, 2000);

                        // Submit the files as a FormData object to the server
                        const formData = new FormData();
                        uploadedFiles.forEach(file => formData.append('uploadedFiles', file));

                        fetch('/Home/ProcessText', {
                            method: 'POST',
                            body: formData
                        }).then(response => response.text())
                            .then(html => {
                                document.open();
                                document.write(html);
                                document.close();
                            })
                            .catch(error => {
                                console.error('Error:', error);
                            });
                    }
                });

                // Drag and drop functionality
                // Note: Ensure that this code is inside the same DOMContentLoaded event listener
                dropZone.addEventListener('click', function () {
                    uploadedFilesInput.click();
                });

                dropZone.addEventListener('keydown', function (e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        uploadedFilesInput.click();
                    }
                });

                dropZone.addEventListener('dragover', function (e) {
                    e.preventDefault();
                    dropZone.classList.add('drag-over');
                });

                dropZone.addEventListener('dragleave', function (e) {
                    e.preventDefault();
                    dropZone.classList.remove('drag-over');
                });

                dropZone.addEventListener('drop', function (e) {
                    e.preventDefault();
                    dropZone.classList.remove('drag-over');

                    if (e.dataTransfer.files.length > 0) {
                        const files = Array.from(e.dataTransfer.files);

                        // Update the uploadedFiles array
                        uploadedFiles.push(...files);

                        // Update the file input's files
                        const dataTransfer = new DataTransfer();
                        uploadedFiles.forEach(file => dataTransfer.items.add(file));
                        uploadedFilesInput.files = dataTransfer.files;

                        displayFiles();
                    }
                });
            });
        </script>
    }
</div>

