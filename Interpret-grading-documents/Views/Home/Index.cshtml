@model List<Interpret_grading_documents.Services.GPTService.GraduationDocument>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4">Upload Grading Documents</h1>

        <div id="loadingScreen" class="mt-3" style="display: none;">
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <p class="mt-3" id="loadingMessage">Initializing...</p>
        </div>

        <div class="mt-3" id="contentSection">
            <input type="file" id="uploadedFiles" accept=".pdf,.jpg,.jpeg,.png" multiple style="display: none;" />

            <div id="dropZone" class="drop-zone" tabindex="0">
                <p class="mb-0">Drag and drop your documents here or click to select files.</p>
            </div>

            <div id="errorMessage" class="alert alert-danger mt-3" style="display: none;"></div>

            <div class="mt-3">
                <h4>Uploaded Files</h4>
                <ul id="fileList" class="list-group"></ul>
            </div>

            <button id="analyzeButton" class="btn btn-primary mt-3 d-block mx-auto d-none">Analyze Data</button>

            <div class="mt-4">
                <a asp-action="ViewUploadedDocuments" asp-controller="Home" class="btn btn-secondary">View Uploaded Documents</a>
            </div>
            <div class="mt-5">
                <h2 class="text-center">Courses List</h2>

                @if (ViewBag.CoursesWithAverageFlag != null)
                {
                    var coursesWithAverageFlag = (List<(string MainCourse, List<string> AlternativeCourses, bool IncludedInAverage)>)ViewBag.CoursesWithAverageFlag;

                    <ul class="list-group mt-4">
                        @foreach (var courseData in coursesWithAverageFlag)
                        {
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="main-course" style="cursor: pointer;" data-bs-toggle="collapse" data-bs-target="#collapse-@courseData.MainCourse.GetHashCode()">
                                        @courseData.MainCourse
                                        @if (courseData.AlternativeCourses.Count > 0)
                                        {
                                            <span class="ms-2 toggle-icon" data-bs-target="#collapse-@courseData.MainCourse.GetHashCode()">&#x25BC;</span>
                                            <small class="text-muted ms-2">(Has alternatives)</small>
                                        }
                                    </span>
                                    <span class="badge @(courseData.IncludedInAverage ? "bg-success" : "bg-secondary") rounded-pill">
                                        @(courseData.IncludedInAverage ? "Included in Average" : "Excluded from Average")
                                    </span>
                                </div>

                                @if (courseData.AlternativeCourses.Count > 0)
                                {
                                    <ul id="collapse-@courseData.MainCourse.GetHashCode()" class="collapse list-group mt-2">
                                        @foreach (var altCourse in courseData.AlternativeCourses)
                                        {
                                            <li class="list-group-item list-group-item-light">@altCourse</li>
                                        }
                                    </ul>
                                }
                            </li>
                        }
                    </ul>
                }
            </div>

        </div>
    </div>

    @section Scripts {
        <style>
            .drop-zone {
                border: 2px dashed #ccc;
                border-radius: 5px;
                padding: 30px;
                text-align: center;
                cursor: pointer;
                color: #aaa;
                transition: border-color 0.3s, background-color 0.3s;
            }

                .drop-zone.drag-over {
                    border-color: #333;
                    background-color: #f0f0f0;
                    color: #333;
                }

            .list-group-item {
                background-color: #f8f9fa;
                border: 1px solid #ddd;
            }

            .list-group-item-light {
                background-color: #f1f1f1;
            }

            .badge.bg-success {
                font-size: 0.9rem;
                padding: 0.5em 1em;
            }

            .badge.bg-secondary {
                font-size: 0.9rem;
                padding: 0.5em 1em;
            }

            .main-course {
                font-weight: 600;
                cursor: pointer;
            }

                .main-course:hover {
                    text-decoration: underline;
                }

            .toggle-icon {
                transition: transform 0.3s ease;
                display: inline-block;
            }

                .toggle-icon.rotate {
                    transform: rotate(180deg);
                }

            .collapse {
                transition: height 0.3s ease;
            }
        </style>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const fileList = document.getElementById('fileList');
                const uploadedFilesInput = document.getElementById('uploadedFiles');
                const analyzeButton = document.getElementById('analyzeButton');
                const dropZone = document.getElementById('dropZone');
                const errorMessage = document.getElementById('errorMessage');
                let uploadedFiles = [];

                const allowedFileTypes = ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
                const maxFileSize = 5 * 1024 * 1024;

                function displayError(message) {
                    errorMessage.textContent = message;
                    errorMessage.style.display = 'block';
                }

                function clearError() {
                    errorMessage.style.display = 'none';
                }

                function validateFile(file) {
                    if (!allowedFileTypes.includes(file.type)) {
                        displayError(`Invalid file type: ${file.name}. Only PDF, JPG, and PNG files are allowed.`);
                        return false;
                    }
                    if (file.size > maxFileSize) {
                        displayError(`File too large: ${file.name}. Max file size is 5 MB.`);
                        return false;
                    }
                    clearError();
                    return true;
                }

                uploadedFilesInput.addEventListener('change', function () {
                    const files = Array.from(uploadedFilesInput.files);
                    const validFiles = files.filter(validateFile);

                    uploadedFiles.push(...validFiles);

                    displayFiles();
                });

                function displayFiles() {
                    fileList.innerHTML = '';
                    uploadedFiles.forEach((file, index) => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.textContent = file.name;

                        const removeButton = document.createElement('button');
                        removeButton.textContent = 'Remove';
                        removeButton.className = 'btn btn-danger btn-sm';
                        removeButton.setAttribute('data-index', index);

                        removeButton.addEventListener('click', function () {
                            uploadedFiles.splice(index, 1);
                            displayFiles();
                        });

                        li.appendChild(removeButton);
                        fileList.appendChild(li);
                    });

                    if (uploadedFiles.length > 0) {
                        analyzeButton.classList.remove('d-none');
                    } else {
                        analyzeButton.classList.add('d-none');
                    }
                }

                analyzeButton.addEventListener('click', function () {
                    if (uploadedFiles.length > 0) {
                        document.getElementById('loadingScreen').style.display = 'block';
                        document.getElementById('contentSection').style.display = 'none';

                        const messages = [
                            "Reading documents...",
                            "Extracting data...",
                            "Verifying courses...",
                            "Finalizing analysis..."
                        ];
                        let index = 0;

                        const loadingMessage = document.getElementById('loadingMessage');
                        const interval = setInterval(function () {
                            loadingMessage.textContent = messages[index++];
                            if (index >= messages.length) {
                                clearInterval(interval);
                            }
                        }, 2000);

                        const formData = new FormData();
                        uploadedFiles.forEach(file => formData.append('uploadedFiles', file));

                        fetch('/Home/ProcessText', {
                            method: 'POST',
                            body: formData
                        }).then(response => {
                            if (response.redirected) {
                                window.location.href = response.url;
                            } else {
                                return response.text();
                            }
                        })
                            .then(html => {
                                if (html) {
                                    document.open();
                                    document.write(html);
                                    document.close();
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                            });
                    }
                });

                dropZone.addEventListener('click', function () {
                    uploadedFilesInput.click();
                });

                dropZone.addEventListener('keydown', function (e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        uploadedFilesInput.click();
                    }
                });

                dropZone.addEventListener('dragover', function (e) {
                    e.preventDefault();
                    dropZone.classList.add('drag-over');
                });

                dropZone.addEventListener('dragleave', function (e) {
                    e.preventDefault();
                    dropZone.classList.remove('drag-over');
                });

                dropZone.addEventListener('drop', function (e) {
                    e.preventDefault();
                    dropZone.classList.remove('drag-over');

                    if (e.dataTransfer.files.length > 0) {
                        const files = Array.from(e.dataTransfer.files);
                        const validFiles = files.filter(validateFile);

                        uploadedFiles.push(...validFiles);

                        const dataTransfer = new DataTransfer();
                        uploadedFiles.forEach(file => dataTransfer.items.add(file));
                        uploadedFilesInput.files = dataTransfer.files;

                        displayFiles();
                    }
                });

                displayFiles();

                const collapsibleSections = document.querySelectorAll('[data-bs-toggle="collapse"]');
                collapsibleSections.forEach(section => {
                    section.addEventListener('click', function () {
                        const icon = this.querySelector('.toggle-icon');
                        icon.classList.toggle('rotate');
                    });
                });
            });
        </script>
    }
</div>
